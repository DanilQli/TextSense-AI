//chat_input.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../config/dependency_injection.dart';
import '../../core/logger/app_logger.dart';
import '../../core/utils/translation_utils.dart';
import '../../domain/repositories/speech_repository.dart';
import '../../domain/usecases/speech/listen_to_speech.dart';
import '../bloc/chat/chat_bloc.dart';
import '../../core/services/translation_service.dart';
import '../../core/constants/app_constants.dart';
import '../bloc/language/language_bloc.dart';

class ChatInput extends StatefulWidget {
  const ChatInput({super.key});

  @override
  State<ChatInput> createState() => _ChatInputState();
}

class _ChatInputState extends State<ChatInput> {
  final TextEditingController _controller = TextEditingController();
  bool _isListening = false;
  StreamSubscription<String>? _subscription;

  void _sendMessage() {
    final text = _controller.text.trim();
    if (text.isNotEmpty) {
      context.read<ChatBloc>().add(SendMessageEvent(text));
      _controller.clear();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Column(
        children: [
          // üîπ Bloc –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–º
          BlocBuilder<LanguageBloc, LanguageState>(
            builder: (context, state) {
              return BlocListener<LanguageBloc, LanguageState>(
              listener: (context, state) {
                // UI –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
              },
                child: BlocBuilder<LanguageBloc, LanguageState>(
                  builder: (context, state) {

                    return Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _controller,
                            onChanged: (value) => _controller.text = value,
                            decoration: InputDecoration(
                              hintText: Tr.get(TranslationKeys.enterText),
                              border: const OutlineInputBorder(
                                borderRadius: BorderRadius.all(Radius.circular(10)),
                              ),
                            ),
                            onSubmitted: (_) => _sendMessage(),
                            maxLines: null,
                            keyboardType: TextInputType.multiline,
                          ),
                        ),
                        IconButton(
                          icon: Icon(
                            _isListening ? Icons.mic : Icons.mic_none,
                            color: _isListening ? Colors.red : Theme.of(context).primaryColor,
                          ),
                          onPressed: _isListening ? _stopListening : _startListening,
                        ),
                        IconButton(
                          icon: Icon(Icons.send, color: Theme.of(context).primaryColor),
                          onPressed: _sendMessage,
                        ),
                      ],
                    );
                  },
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  void _startListening() async {
    setState(() {
      _isListening = true;
    });

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UseCase –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Ä–µ—á–∏
      final speechUseCase = getIt<ListenToSpeech>();
      final result = await speechUseCase();

      result.fold(
            (failure) {
          setState(() {
            _isListening = false;
          });
          ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(failure.message))
          );
        },
            (stream) {
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
          final subscription = stream.listen(
                (text) {
              AppLogger.debug('–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞: $text');
              if (text.isNotEmpty && mounted) {
                setState(() {
                  _controller.text = text;
                });
              }
            },
            onError: (e) {
              AppLogger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', e);
              if (mounted) {
                setState(() {
                  _isListening = false;
                });
                ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('${Tr.get(TranslationKeys.errorNum20)} $e'))
                );
              }
            },
            onDone: () {
              AppLogger.debug('–ü–æ—Ç–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
              if (mounted) {
                setState(() {
                  _isListening = false;
                });

                // –í–∞–∂–Ω–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (_controller.text.isNotEmpty) {
                  AppLogger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${_controller.text}');
                  // –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                  // _sendMessage();
                }
              }
            },
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          _subscription = subscription;
        },
      );
    } catch (e) {
      AppLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', e);
      if (mounted) {
        setState(() {
          _isListening = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('${Tr.get(TranslationKeys.errorNum21)} $e'))
        );
      }
    }
  }

  void _stopListening() async {
    if (!_isListening) return;

    setState(() {
      _isListening = false;
    });

    try {
      final speechRepository = getIt<SpeechRepository>();
      await speechRepository.stopListening();

      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      _subscription?.cancel();
      _subscription = null;
    } catch (e) {
      AppLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', e);
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${Tr.get(TranslationKeys.errorNum22)} $e'))
      );
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    _subscription?.cancel();
    super.dispose();
  }

}